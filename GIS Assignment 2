{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 600x500 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 432x288 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Opening google\n",
    "import googlemaps\n",
    "import polyline\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "from datetime import datetime\n",
    "with open (\"C:\\\\Users\\\\mnmureithi\\\\Google API.txt\",\"r\") as apiKey:\n",
    "      #Connect to the googlemaps api\n",
    "        gmaps=googlemaps.Client(apiKey.read())\n",
    "        result0 = gmaps.directions(origin=\"-0.278538, 36.046444\",waypoints=[(-0.42581598, 39.65352795),(1.75174651, 40.04846739)],destination= \"3.94899426, 41.86590617\",mode=\"driving\",departure_time=datetime.now())\n",
    "        result1 = gmaps.directions(origin=\"3.94899426, 41.86590617\",destination= \"-0.278538, 36.046444\",mode=\"driving\",departure_time=datetime.now())\n",
    "        \n",
    "        distList = []\n",
    "        timeList = []\n",
    "        for x in range(3):\n",
    "            distList.append(result0[0]['legs'][x]['distance']['value'])\n",
    "            timeList.append(result0[0]['legs'][x]['duration']['value'])\n",
    "          \n",
    "        totalMin = divmod(sum(timeList), 60)[0]\n",
    "        dist = divmod(sum(distList),1000)[0]\n",
    "        hrs, mts = divmod(totalMin, 60)\n",
    "        time = \"{} hours {} min\".format(hrs, mts)\n",
    "      \n",
    "        \n",
    "        dist1=result1[0]['legs'][0]['distance']['text']\n",
    "        time1=result1[0]['legs'][0]['duration']['text']\n",
    "        \n",
    "        line0=polyline.decode(result0[0]['overview_polyline']['points'])\n",
    "        line1=polyline.decode(result1[0]['overview_polyline']['points'])\n",
    "        \n",
    "        #We need to invert the coordinates into(x,y) format rather than y,x format so as to plot on mpl\n",
    "        xs=[xy[1] for xy in line0]\n",
    "        ys=[xy[0] for xy in line0]\n",
    "        xs1=[xy1[1] for xy1 in line1]\n",
    "        ys1=[xy1[0] for xy1 in line1]\n",
    "        \n",
    "        #Plot the journey to and fro\n",
    "        plt.figure(figsize=(6,5),dpi=100)\n",
    "        plt.plot (xs,ys,label=\"distance: {}km,time {}\".format(dist,time),linewidth=5.0)\n",
    "        plt.plot (xs1,ys1,label=\"distance Return: {},time {}\".format(dist1,time1),linewidth=5.0,linestyle='-.')\n",
    "    \n",
    "        #Plotting the start, end and waypoints\n",
    "        plt.plot( 36.046444,-0.278538 , marker='*',markerfacecolor='red',markersize=20,markeredgewidth=2,markeredgecolor='black')\n",
    "        plt.plot( 40.04846739,1.75174651 , marker='*' ,markerfacecolor='green',markersize=20,markeredgewidth=2,markeredgecolor='black')\n",
    "        plt.plot( 39.65352795,-0.42581598 , marker='*',markerfacecolor='green',markersize=20,markeredgewidth=2,markeredgecolor='black')\n",
    "        plt.plot(41.86590617,3.94899426, marker='*',markerfacecolor='blue',markersize=20,markeredgewidth=2,markeredgecolor='black')\n",
    "        \n",
    "        #Title and axis label\n",
    "        plt.title(\"SAFARICOM NAKURU TO MANDERA THROUGH TWO OTHER BTSs\")\n",
    "        plt.xlabel(\"Longitudes\")\n",
    "        plt.ylabel(\"Latitudes\")\n",
    "        plt.legend()\n",
    "        plt.show ()\n",
    "        \n",
    "        #Saving the image\n",
    "        plt.savefig('best_route.png')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m Total_hours=37hrs 36min \n",
      " Total_distance=2094kms\n",
      " Total_days=5days and 4nights \n",
      " Mileage_allowance=15/Km\n",
      " Landcruiser_consumption=11km/litre\n",
      " Diesel_price/ltr=102.13sh\u001b[0m\n",
      "\n",
      "\n",
      "\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Cost_centre</th>\n",
       "      <th>Cost_per_unit</th>\n",
       "      <th>Units</th>\n",
       "      <th>Total_costs</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Accommodation</td>\n",
       "      <td>7000.00</td>\n",
       "      <td>4.0</td>\n",
       "      <td>28000.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Per diem</td>\n",
       "      <td>8000.00</td>\n",
       "      <td>4.0</td>\n",
       "      <td>32000.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Mileage_allowance</td>\n",
       "      <td>15.00</td>\n",
       "      <td>1290.0</td>\n",
       "      <td>19350.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Diesel_price/ltr</td>\n",
       "      <td>102.13</td>\n",
       "      <td>190.5</td>\n",
       "      <td>19455.765</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Cost_centre  Cost_per_unit   Units  Total_costs\n",
       "0      Accommodation        7000.00     4.0    28000.000\n",
       "1           Per diem        8000.00     4.0    32000.000\n",
       "2  Mileage_allowance          15.00  1290.0    19350.000\n",
       "3   Diesel_price/ltr         102.13   190.5    19455.765"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Cost Calculations\n",
    "import math\n",
    "import pandas as pd\n",
    "#Setting out the variuos per unit costs\n",
    "print('\\033[1m','Total_hours=37hrs 36min \\n','Total_distance=2094kms\\n','Total_days=5days and 4nights \\n',\n",
    "      'Mileage_allowance=15/Km\\n','Landcruiser_consumption=11km/litre\\n','Diesel_price/ltr=102.13sh' '\\033[0m')\n",
    "\n",
    "#Initializing the various costs\n",
    "Cost_centre=['Accommodation','Per diem','Mileage_allowance','Diesel_price/ltr']\n",
    "Cost_per_unit=[7000,8000,15,102.13]\n",
    "for x,y in zip(Cost_centre,Cost_per_unit):\n",
    "    print()\n",
    "#Tabulating the expense table   \n",
    "df=pd.DataFrame({'Cost_centre':Cost_centre,'Cost_per_unit':Cost_per_unit})\n",
    "df['Units']=4,4,1290,190.5\n",
    "#Calculating the total cost per cost_centre\n",
    "df['Total_costs']=df['Units']*df['Cost_per_unit']\n",
    "'\\033[0m'\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "#From Nakuru to Mandera geojson route calculation\n",
    "import ast\n",
    "import geojson\n",
    "with open('C:\\\\Users\\\\mnmureithi\\\\Nakuru to Mandera.txt', 'r') as data0:\n",
    "    route = ast.literal_eval(data0.read())\n",
    "    \n",
    "    #extract and decode the polyline\n",
    "    line_coord = polyline.decode(route[0]['overview_polyline']['points']) #format is lat, long(y,x)\n",
    "    crs = {\"type\":\"name\", \"properties\":{'name':'EPSG:4326'}}\n",
    "    \n",
    "    #Defining the properties\n",
    "    properties = {\"name\": \"Nakuru to Mandera\", \"LengthKM\":1159 ,\"timeH\":'19 hours 53 mins'}\n",
    "   \n",
    "    #Saving the geojson file\n",
    "    with open('D:\\\\resources\\\\Digital Academy\\\\Python\\\\GIS\\\\route.geojson', 'w')  as r:\n",
    "        routejs = geojson.LineString([(xy[1], xy[0]) for xy in line_coord], crs = crs)\n",
    "        \n",
    "        #dump routejs to geojson\n",
    "        geojson.dump(geojson.Feature(geometry = routejs, properties = properties), r)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "#From Mandera to Nakuru geojson route calculation\n",
    "import ast\n",
    "import geojson\n",
    "with open('C:\\\\Users\\\\mnmureithi\\\\Mandera to Nakuru.txt', 'r') as data1: \n",
    "    route = ast.literal_eval(data1.read())\n",
    "    \n",
    "    #extract and decode the polyline\n",
    "    line_coord = polyline.decode(route[0]['overview_polyline']['points']) #format is lat, long(y,x)\n",
    "    crs = {\"type\":\"name\", \"properties\":{'name':'EPSG:4326'}}\n",
    "    \n",
    "    #Saving the geojson file\n",
    "    properties1 = {\"name\": \"Mandera to Nakuru\", \"LengthKM\":935 ,\"timeH\":'17 hours 43 mins'}\n",
    "    with open('D:\\\\resources\\\\Digital Academy\\\\Python\\\\GIS\\\\route1.geojson', 'w')  as r:\n",
    "        routejs = geojson.LineString([(xy[1], xy[0]) for xy in line_coord], crs = crs)\n",
    "        \n",
    "        #dump routejs to geojson\n",
    "        geojson.dump(geojson.Feature(geometry = routejs, properties = properties), r)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
